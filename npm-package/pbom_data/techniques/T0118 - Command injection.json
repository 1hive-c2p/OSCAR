{
    "id": "T0118",
    "type": "Technique",
    "tactic": "Execution",
    "realm": [
        "CodeSecurity"
    ],
    "summary": "Command injection",
    "description": "OS command injection is a web security vulnerability that allows an attacker to execute arbitrary operating system commands on the server that is running an application.\nCommand injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. \nIn this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. \nCommand injection attacks are possible largely due to insufficient input validation\n",
    "mitigations": [
        {
            "id": "M1180",
            "type": "Mitigation",
            "summary": "Avoid calling OS commands directly",
            "description": "Built-in library functions are a very good alternative to OS Commands, as they cannot be manipulated to perform tasks other than those it is intended to do.\nFor example use mkdir() instead of system(\"mkdir /dir_name\").\nIf there are available libraries or APIs for the language you use, this is the preferred method.\n",
            "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html#defense-option-1-avoid-calling-os-commands-directly"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        },
        {
            "id": "M1181",
            "type": "Mitigation",
            "summary": "Use parametrization with input validation",
            "description": "If calling a system command that incorporates user-supplied cannot be avoided, the following two layers of defense should be used within software to prevent attacks.\n1. Parametrization: If available, use structured mechanisms that automatically enforce the separation between data and command. These mechanisms can help provide the relevant quoting and encoding.\n2. Input validation: The values for commands and the relevant arguments should be both validated. There are different degrees of validation for the actual command and its arguments.\nWhen it comes to the commands used, these must be validated against a list of allowed commands.\n",
            "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html#defense-option-3-parameterization-in-conjunction-with-input-validation"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        }
    ],
    "detections": [
        {
            "id": "D1170",
            "type": "Detection",
            "summary": "Configure application audit logs to detect injection attacks",
            "description": "Audit logs can help you to monitor application traffic in order to detect injection attacks.\nAudit logs can be configured on multiple layers, for example you can enable access logging for a web server or use your custom application events.\nMonitor for SQL-like, javascript code, shell command constructions inside the application requests, also check for multiple error events in application logs.\nCreate an allow-list of commands and monitor for the attempts of using the commands out of this list.\n",
            "references": [
                "https://www.splunk.com/en_us/blog/security/sql-injections-the-splunk-method-for-auditing-your-application-security-model.html",
                "https://www.acunetix.com/blog/articles/using-logs-to-investigate-a-web-application-attack/",
                "https://documentation.wazuh.com/current/proof-of-concept-guide/detect-web-attack-sql-injection.html",
                "https://www.elastic.co/guide/en/kibana/master/security-best-practices.html#_cross_site_scripting_xss",
                "https://www.cobalt.io/blog/a-pentesters-guide-to-command-injection",
                "https://docs.rapid7.com/tcell/command-injection/"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        }
    ],
    "references": [
        "https://owasp.org/www-community/attacks/Command_Injection",
        "https://portswigger.net/web-security/os-command-injection"
    ],
    "metadata": {
        "state": "draft",
        "version": 0.1
    }
}