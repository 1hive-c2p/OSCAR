{
    "id": "T0117",
    "type": "Technique",
    "tactic": "Execution",
    "realm": [
        "CodeSecurity"
    ],
    "summary": "SQL injection",
    "description": "SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. \nA SQL injection attack consists of insertion or \u201cinjection\u201d of a SQL query via the input data from the client to the application. \nSuccessful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system.\n",
    "mitigations": [
        {
            "id": "M1170",
            "type": "Mitigation",
            "summary": "Use parameterized queries",
            "description": "A parameterized query is a query in which placeholders are used for parameters and the parameter values are supplied at execution time. \nParameterized queries ensure that an attacker is not able to change the intent of a query, even if SQL commands are inserted by an attacker.\nNote that parametrized queries should be done on the server-side.\nEvery language supports their own constructions, please use the references to find appropriate mechanism for your technologies.\n",
            "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-1-prepared-statements-with-parameterized-queries",
                "https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        },
        {
            "id": "M1171",
            "type": "Mitigation",
            "summary": "Use stored procedures",
            "description": "A stored procedure is a set of Structured Query Language (SQL) statements with an assigned name, which are stored in a database, so it can be reused and shared by multiple applications.\nA stored procedure provides an important layer of security between the user interface and the database. \nIt supports security through data access controls because end users may enter or change data, but do not write procedures. \nA stored procedure preserves data integrity because information is entered in a consistent manner. \nNote that safely implemented stored procedure does not include any unsafe dynamic SQL generation.\n",
            "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-2-stored-procedures"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        },
        {
            "id": "M1172",
            "type": "Mitigation",
            "summary": "Use allow-list input validation",
            "description": "Input validation is performed to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. \nInput validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.\nAllow list validation is appropriate for all input fields provided by the user. Allow list validation involves defining exactly what IS authorized, and by definition, everything else is not authorized.\n",
            "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-3-allow-list-input-validation",
                "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        },
        {
            "id": "M1173",
            "type": "Mitigation",
            "summary": "Escape all user supplied input",
            "description": "This technique should only be used as a last resort, when none of the above are feasible. \nEscape user input before putting it in a query.\nEach DBMS supports one or more character escaping schemes specific to certain kinds of queries. \nIf you then escape all user supplied input using the proper escaping scheme for the database you are using, the DBMS will not confuse that input with SQL code written by the developer, thus avoiding any possible SQL injection vulnerabilities.\n",
            "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-4-escaping-all-user-supplied-input"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        }
    ],
    "detections": [
        {
            "id": "D1170",
            "type": "Detection",
            "summary": "Configure application audit logs to detect injection attacks",
            "description": "Audit logs can help you to monitor application traffic in order to detect injection attacks.\nAudit logs can be configured on multiple layers, for example you can enable access logging for a web server or use your custom application events.\nMonitor for SQL-like, javascript code, shell command constructions inside the application requests, also check for multiple error events in application logs.\nCreate an allow-list of commands and monitor for the attempts of using the commands out of this list.\n",
            "references": [
                "https://www.splunk.com/en_us/blog/security/sql-injections-the-splunk-method-for-auditing-your-application-security-model.html",
                "https://www.acunetix.com/blog/articles/using-logs-to-investigate-a-web-application-attack/",
                "https://documentation.wazuh.com/current/proof-of-concept-guide/detect-web-attack-sql-injection.html",
                "https://www.elastic.co/guide/en/kibana/master/security-best-practices.html#_cross_site_scripting_xss",
                "https://www.cobalt.io/blog/a-pentesters-guide-to-command-injection",
                "https://docs.rapid7.com/tcell/command-injection/"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        }
    ],
    "references": [
        "https://www.spiceworks.com/it-security/application-security/articles/what-is-sql-injection/",
        "https://owasp.org/www-community/attacks/SQL_Injection",
        "https://portswigger.net/web-security/sql-injection"
    ],
    "metadata": {
        "state": "draft",
        "version": 0.1
    }
}