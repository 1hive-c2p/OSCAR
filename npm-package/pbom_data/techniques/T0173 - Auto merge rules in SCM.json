{
    "id": "T0173",
    "type": "Technique",
    "tactic": "Execution",
    "realm": [
        "SCMPosture"
    ],
    "summary": "Auto merge rules in SCM",
    "description": "Auto merge rules in SCM (Source Code Management) are rules that determine how code changes should be merged automatically into a main code repository or branch.\nWhile auto merge rules in SCM can help to streamline the code review and merge process, there are several security risks to consider, including:\n1. Malicious code injection: Auto merge rules may allow malicious code changes to be merged into the code repository, compromising the security of the system.\n2. Vulnerability propagation: Automatic merges can propagate security vulnerabilities to the main code repository or branch, allowing attackers to exploit these vulnerabilities to gain unauthorized access to the system.\n3. Human error: Auto merge rules can lead to errors in the code repository, such as overwriting critical code or merging code that has not been properly reviewed.\n4. Compliance violations: Auto merge rules can violate compliance requirements, such as failing to properly audit code changes or not properly segregating code changes between different teams.\n",
    "mitigations": [
        {
            "id": "M1730",
            "type": "Mitigation",
            "summary": "Implement code reviews",
            "description": "Code reviews are a valuable tool for improving code quality, reducing technical debt, and ensuring the security and reliability of software applications.\nMost crucial changes should be reviewed and validated to ensure there are no any security risks.\nCode reviews can identify defects and vulnerabilities in the code before it's deployed, reducing the likelihood of security breaches, system failures, and other issues.\n",
            "references": [
                "https://medium.com/@paul_io/security-code-review-101-a3c593dc6854"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        },
        {
            "id": "M1731",
            "type": "Mitigation",
            "summary": "Implement verification of signed commits",
            "description": "Signing commits, or requiring to sign commits, gives other users confidence about the origin of a specific code change. \nIt ensures that the author of the change is not hidden and is verified by the version control system, thus the change comes from a trusted source.\nFor each repository in use, enforce the branch protection rule of requiring signed commits, and make sure only signed commits are capable of merging.\n",
            "references": [
                "https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification",
                "https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        },
        {
            "id": "M1732",
            "type": "Mitigation",
            "summary": "Implement code scanning for security risks",
            "description": "Scanning pull requests to detect risks allows for early detection of vulnerable code and/or dependencies and helps mitigate potentially malicious code.\nFor every repository in use, enforce risk scanning on every pull request.\n",
            "references": [
                "https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/triaging-code-scanning-alerts-in-pull-requests"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        }
    ],
    "detections": [
        {
            "id": "D1500",
            "type": "Detection",
            "summary": "Configure monitoring of used artifacts and open-source libraries",
            "description": "Implement regular scanning of used artifacts and open-source libraries for known vulnerabilities.\nSet up monitoring of reported issues based on regular scanning results.\n",
            "references": [
                "https://owasp.org/www-community/Component_Analysis"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        },
        {
            "id": "D1510",
            "type": "Detection",
            "summary": "Implement Intrusion Detection System and anti-malware",
            "description": "An intrusion detection system (IDS) is a security tool designed to detect and alert on unauthorized access to a computer system or network.\nImplementing intrusion detection systems (IDS) and anti-malware software can help to identify and block malicious activity.\nIDS is a critical security tool that helps organizations to detect and respond to security incidents in a timely manner. \nBy providing real-time monitoring and analysis of network traffic, IDS can help organizations to stay ahead of potential threats and reduce the risk of a security breach.\n",
            "references": [
                "https://www.checkpoint.com/cyber-hub/network-security/what-is-an-intrusion-detection-system-ids/"
            ],
            "metadata": [
                {
                    "version": 0.1
                },
                {
                    "state": "draft"
                }
            ]
        }
    ],
    "references": [
        "https://securityintelligence.com/posts/abusing-source-code-management-systems/"
    ],
    "metadata": {
        "version": 0.1,
        "state": "draft"
    }
}